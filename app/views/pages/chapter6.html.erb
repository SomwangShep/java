<div id="page_wrapper">
<div id="content">
<!-- ========================================================= -->	
	<table id="jumpTbl">
		<tr><td><a href="#Variations">Variations</a></td><td><a href="#CommonErrors">Common Errors</a></td><td><a href="#SequenceGenerationandSeriesSummation">Sequence Generation and Series Summation</a></td><td><a href="#"></a></td></tr>
		<tr><td><a href="#"></a></td><td><a href="#"></a></td><td><a href="#"></a></td><td><a href="#"></a></td></tr>
		<tr><td><a href="#"></a></td><td><a href="#"></a></td><td><a href="#"></a></td><td><a href="#"></a></td></tr>
	</table>
<!-- ========================================================= -->	
  <h1> Chapter 6 - For Loops</h1>
  <p>
  	A <em>for</em> loop is a special form of a while loop.  We often need a repetition structure that counts as the loop below does.
  </p>
  <p class="codeblock">
int count = 1;
while(count < 6)
{
	// Useful code

	count = count + 1;
}
  </p>
  <p>
  	A counting variable (called <code>count</code> in this example), is initialized to some value.  The code inside repeats as long as the count is less than some value.  At the end of each loop the count is incremented so that it counts from the initial value up to some maximum.  In the example above, the <code>count</code> variable counts from 1 to 5.
  </p>
  <p>
  	The <em>for</em> structure allows us to specify the loop properties in one place.  The following code is equivalent to the code above.
  </p>
  <p class="codeblock">
int count;
for(count = 1; count < 6; count = count + 1)
{
	// Useful code	
}
  </p>
  <p>
  	A variable must be created to be used as an count variable.  The same variable can be used for multiple <em>for</em> loops since it will be initialized at the start of each.  It is common to use the letter i for a counting variable.  
  </p>
  <p>
  	Three things go in the parentheses of a <em>for</em> loop and they are separated by semicolons.
  </p>
  <p style="text-align: center;"><%= image_tag "c6_p1.jpg"%></p>
  <p>
  	When a <em>for</em> loop is encountered in program execution, the count variable is set to the given initialization value.  This only happens before the first pass through the loop.    
  </p>
  <p>
  	Next, the condition is checked.  If the condition is <em>true</em>, the code inside the loop runs.  
  </p>
  <p>
  	When the code in the block has executed, the loop operation is performed changing the counting variable.
  </p>
  <p>
  	The condition is checked again, and if it is <em>true</em>, the loop runs again.  When the condition becomes <em>false</em>, the loop does not run again, and the program continues.  If the condition never becomes <em>false</em>, an infinite loop results.
  </p>
  <p>
  	The program below calculates and prints the squares of the numbers from 0 through 5.
  </p>
  <p class="codeblock">
public class Squares
{
	public static void main(String[] args)
	{
		int i;
		int square;

		<strong>for(i = 0; i < 6; i = i + 1)</strong>
		{
			square = i * i;
			System.out.println(i + " * " + i + " = " + square);
		}
	}
}
  </p>
	<p style="text-align: center;"><%= image_tag "c6_p2.jpg"%></p>
	
	<h2 id="Variations">
		Variations
	</h2>
	<p>
		The counting variable can be created inside the <em>for</em> statement, but then the variable only exists inside the loop.
	</p>
	<p class="codeblock">
for(<strong>int i = 0;</strong> i < 5; i = i + 1)
{
	System.out.println(i);
}
System.out.println(<strong>i</strong>);  // This won't compile
	</p>
	<p>
		To count to any particular number, the condition can use either < or <= depending on the constant chosen.
	</p>
	<pre style="color:blue;">
	for(i = 1; i < 6; i = i + 1)

	for(i = 1; i <= 5; i = i + 1)
	</pre>
	<p>
		Both of the above will run five times.  Which to use is a matter of preference.
	</p>
	<p>
		Any condition, however complex, may be used as long as it can be evaluated as <em>true</em> or <em>false</em>.
	</p>
	<pre style="color:blue;">
	for(i = 1; <strong>i < 2 && x != 7 || s.equals("Beans")</strong>; i = i + 1)
	</pre>
	<p>
		The loop operation can be any assignment statement that provides the desired result.
	</p>
	<pre style="color:blue;">
		for(i = 1; i < 50; <strong>i = i * 3 + 2</strong>)
	</pre>
	<p>
		The loop operation can be any assignment statement, but it is most common to simply increment the index.  It is also common to use the increment operator (++) for this task.
	</p>
	<pre style="color:blue;">
	for(i = 1; i < 6; <strong>i++</strong>)
	</pre>
	<p>
		As with the <em>while</em> loop, the <em>break</em> statement causes the current <em>for</em> loop to exit immediately.  The program continues after the loop.
	</p>
	<p class="codeblock">
for(i = 0; i < 25; i++)
{
	input = in.nextInt();
	total = total + input;

	if(input == 0)
	{
		<strong>break;</strong>
	}
}
	</p>
	<p>
		<em>For</em> loops can be nested like <em>if</em> statements and <em>while</em> loops.  Separate counting variables must be used for each loop.  The inside loop runs many times for each run of the outside loop.
	</p>
	<p class="codeblock">
for(i = 0; i < 25; i++)
{
	for(j = 0; j < 50; j++)
	{
		System.out.println(i + " , " + j);
	}
}
	</p>
	
	<h2 id="CommonErrors">
		Common Errors
	</h2>
	<p>
		Like <em>while</em> and <em>if</em> statements, <em>for</em> statements do not end with a semicolon.  Doing so will cause the program to do nothing until the loop ends.
	</p>
	<p>
		The loop must have a condition that will allow the loop to run some number of times and then end.  If the condition is always <em>true</em>, the loop will never end.
	</p>
	<p class="codeblock">
for(int i = 0; <strong>i >= 0</strong>; i++)  <span style="color:red;">// Don't do this</span>
{
	System.out.println(i);
}
	</p>
	<p>
		If the condition is never <em>true</em>, the loop will not run at all.
	</p>
	<p class="codeblock">
for(int i = 0; <strong>i == 5</strong>; i++)  <span style="color:red;">// Don't do this</span>
{
	System.out.println(i);
}
	</p>
	<p>
		As always, an assignment statement can not be used as a condition.
	</p>
	<p class="codeblock">
for(int i = 0; <strong>i = 5</strong>; i++)  <span style="color:red;">// Don't do this</span>
{
	System.out.println(i);
}
	</p>
	
	<h2 id="SequenceGenerationandSeriesSummation">
		Sequence Generation and Series Summation
	</h2>
	<p>
		<em>For</em> loops are often used to generate a sequence of numbers.  For example, the following loop generates even numbers.
	</p>
	<p class="codeblock">
for(int i = 0; i < 50; i = i + 2)
{
	System.out.println(i);
}
	</p>
	<p>
		The loop below generates the odd numbers from -9 to 9.
	</p>
	<p class="codeblock">
for(int i = -9; i <= 9; i = i + 2)
{
	System.out.println(i);
}
	</p>
	<p>
		The loop below generates the sequence 1, 2, 3, and repeats it 5 times.  
	</p>
	<p class="codeblock">
for(i = 0; i < 15; i++)
{
	System.out.println(<strong>i % 3 + 1</strong>);
}
	</p>
	



<!-- ========================================================= -->	
</div> <!-- end content -->
</div> <!-- close page_wrapper -->