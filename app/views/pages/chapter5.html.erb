<div id="page_wrapper">
<div id="content">
<!-- ========================================================= -->	
	<table id="jumpTbl">
		<tr><td><a href="#InputValidation">Input Validation</a></td><td><a href="#SolvingLoopProblems">Solving Loop Problems</a></td><td><a href="#FlowDiagrams">Flow Diagrams</a></td></tr>
<!--		<tr><td><a href="#"></a></td><td><a href="#"></a></td><td><a href="#"></a></td><td><a href="#"></a></td></tr>
		<tr><td><a href="#"></a></td><td><a href="#"></a></td><td><a href="#"></a></td><td><a href="#"></a></td></tr> -->
	</table>
<!-- ========================================================= -->	
  <h1> Chapter 5 - While Loops </h1>
  <p>
  	A <em>while</em> loop is a repetition structure.  It causes a block of code to run again and again as long as some condition is true.  The condition is placed in parentheses after the word <em>while</em>.  In the example below, the condition will always be <em>true</em>, so the line of code inside the braces will repeat until the program is terminated.
  </p>
  <pre>
	while(1 == 1)
	{
		System.out.println("And I'll say it again,");
	}
  </pre>
  <p style="text-align: center;"><%= image_tag "c5_p1.jpg"%></p>
  <p>
  	Equivalently, we could have used true as a condition.
  </p>
  <pre>
	while(true)
	{
		System.out.println("And I'll say it again,");
	}
  </pre>
  <p>
  	Note that a semicolon is <strong>not</strong> placed after the <em>while</em> statement.  The while statement only affects the next thing that follows it. We want that next thing to be a block of code in braces.  If a semicolon is put after the while statement, the semicolon will be seen as the next thing.  Everything before the semicolon (nothing) will repeat again and again forever.  The block with the print statement will never be reached.
  </p>
  <pre>
	while(true);    <strong>Don't do this</strong>
	{
		System.out.println("And I'll say it again,");
	}
  </pre>
  <p>
  	A loop that never ends is often called an "infinite loop", and is usually considered undesirable, especially if it doesn't do anything to indicate it is running.  Usually, the loop is designed so that something happens inside changing the condition, and ending the loop.  
  </p>
  <pre>
	int x = 1;
	<strong>while(x < 6)</strong>
	{
		System.out.println("Counting, " + x);
		x = x + 1;
	}
  </pre>
  <p>
  	In the example above, x is initialized to 1.  When the loop is reached for the first time, the condition is <strong>true</strong>.  1 is less than 6.  The block inside the <strong>while</strong> braces runs printing the line
  </p>
  <pre>
  Counting, 1
  </pre>
  <p>
  	and incrementing the value of x to 2.  When the closing brace is reached, the <strong>while</strong> condition is checked again.  Since it is still <strong>true</strong> (2 is less than 6), the block runs again.
  </p>
  <p style="text-align: center;"><%= image_tag "c5_p2.jpg"%></p>
	<p>
		The fifth time the block runs, "Counting, 5" is printed, and x is incremented from 5 to 6.  When the closing brace of the <em>while</em> loop is reached, the condition is <em>false</em>.  6 is not less than 6.  The loop ends, and the program continues.
	</p>
	<p>
		The <em>while</em> loop condition is checked before each pass through the loop, including the first.  
	</p>
	<p>
		The <em>while</em> loop is particularly useful if we don't know in advance how many times the loop will repeat.  The following program plays a coin flip game with the user.  After each game, the user is asked to play again.  If the answer is not "y", the program ends.
	</p>
	<p class="codeblock">
	import java.util.Scanner;
	
	public class CoinFlip
	{
		public static void main(String[] args)
		{
			Scanner in = new Scanner(System.in);
			<strong>String playAgain = "y";</strong>
			String guess;
	
			<strong>while(playAgain.equals("y"))</strong>
			{
				System.out.println("I flip it, you call it.");
				System.out.println("h for heads, t for tails.");
				guess = in.nextLine();
	
				if(guess.equals("h"))
				{
					System.out.println("You lose.  It was tails.");
				}
				else
				{
					System.out.println("You lose.  It was heads.");
				}
	
				System.out.println("Play again? (y or n)");
				<strong>playAgain = in.nextLine();</strong>
			}
		}
	}
	</p>
	<p>
		When the program starts, the String variable <code>playAgain</code> is initialized to "y".  As long as this is <em>true</em>, the <em>while</em> loop will repeat.  At the end of each game, the user is asked to play again.  If the user types anything but "y", the <em>while</em> loop will end.  This loop might run once, or thousands of times depending on the user.  
	</p>
	<p>
		As with <em>if</em> structures, <em>while</em> loops can be nested inside each other.  The inner loop will run through all of its repetitions for each pass of the outer loop.
	</p>
	<p class="codeblock">
	int cards;
	while(playAgain.equals("y"))
	{
		cards = 0;
		while(cards < 5)
		{
			cards = cards + 1;
		}
	}	
	</p>
	<p>
		The <em>break</em> statement causes the current loop to exit immediately.  The program continues after the loop.  Note that a <em>break</em> statement is used within a loop.  It can not be used to exit an <em>if</em> or <em>else</em> block outside of a loop.
	</p>
	<p class="codeblock">
	int x = 0;
	while(true)
	{
		x = x + 1;
		if(x > 25)
		{
			<strong>break;</strong>
		}
	}
	System.out.println("x exceeds 25");
	</p>
	<p>
		If used in nested loops, the break statement only exits the innermost loop.  There are times when the break statement is particularly convenient, but the preferred method of exiting a loop is to build the exit condition into the design of the loop.
	</p>
	
	<h2 id="InputValidation">
		Input Validation
	</h2>
	<p>
		A common use of a <em>while</em> loop is to validate user input.  Suppose we ask the user to enter a positive integer.  If the user enters a negative number, the program should complain and ask the user to enter a positive number again.  This way, we make sure we have good data before we start using it.
	</p>
	<p>
		The following code requires that the user enter a positive integer before moving on.
	</p>
	<pre>
	int x = -1;
	Scanner in = new Scanner(System.in);
	
	<strong>while(x < 0)</strong>
	{
		System.out.println("Please enter a positive integer.");
		x = in.nextInt();
	}
	
	System.out.println("Yes " + x + " is positive.");
	</pre>
	<p>
		Since x is initialized to -1 (less than 0), the <em>while</em> loop will execute the first time it is reached.  After each run through the loop, the condition is checked again.  If the user has entered a positive number, the condition x < 0 will be <em>false</em>, and the loop will not run again.  The program continues.	
	</p>
	<p>
		As a second example of user input validation, suppose we have a game program that asks the user to play again, and expects either "y" or "n" as a response.  We would like the program to check this input, and require the user to enter one of the two possible choices.
	</p>
	<p class="codeblock">
System.out.println("Play again? (y or n)");
playAgain = in.nextLine();

while( <strong>!(playAgain.equals("y") || playAgain.equals("n")) )</strong>
{
	System.out.println("Please enter y or n.");
	playAgain = in.nextLine();
}
	</p>
	<p>
		The <em>while</em> loop will repeat as long as the condition is <em>true</em>, and exit when the condition is <em>false</em>.  We need a condition that will be true for bad inputs, and false for good inputs (y or n).  Consider the condition below.
	</p>
	<pre>
	playAgain.equals("y") || playAgain.equals("n")
	</pre>
	<p>
		This is <em>true</em> if the user entered y or n (a good input) and <em>false</em> otherwise, which is exactly the opposite of what we want.  If we use the NOT operator on the entire condition, it will do what we wish.
	</p>
	<pre>
	!(playAgain.equals("y") || playAgain.equals("n"))
	</pre>
	
	<h2 id="SolvingLoopProblems">
		Solving Loop Problems
	</h2>
	<p>
		What is the output of this block of code?
	</p>
	<p class="codeblock">
int i = 0;
int x = 2;

while (i <= 4)
{
    i++;
    x = x * 2;
}

System.out.println("i = " + i);
System.out.println("x = " + x);
	</p>
	<p>
		For problems involving loops, it is often useful to make a table showing the values of the variable after each pass through the loop.  For the problem above, we want to repeat the loop until i is no longer less than or equal to 4.
	</p>
	<table id="customers">
		<tr><th>When</th><th>i</th><th>x</th></tr>
		<tr><td>Initially</td><td>0</td><td>2</td></tr>
		<tr><td>After first pass</td><td>1</td><td>4</td></tr>
		<tr><td>After second pass</td><td>2</td><td>8</td></tr>
		<tr><td>After third pass</td><td>3</td><td>16</td></tr>
		<tr><td>After fourth pass</td><td>4</td><td>32</td></tr>
		<tr><td>After fifth pass</td><td>5</td><td>64</td></tr>
	</table>
	<p>
		After the loop completes for the fifth time, i is 5, which is not less than or equal to 4.  The loop ends, and the answer is:
	</p>
	<pre style="color:blue;">
	i = 5
	x = 64
	</pre>
	
	<h2 id="FlowDiagrams">
		Flow Diagrams
	</h2>
	<p>
		A <em>while</em> loop can be depicted by a flow diagram in much the same way as an <em>if/else</em> structure.  A diamond shape is used to represent the <em>while</em> condition.  The diamond has a <em>true</em> branch and a <em>false</em> branch.  The <em>true</em> branch leads to the code block and loops back to the diamond.  The false branch exits the loop.
	</p>
	<p style="text-align: center;"><%= image_tag "c5_p7.jpg"%></p>


<!-- ========================================================= -->	
</div> <!-- end content -->
</div> <!-- close page_wrapper -->